- name: VAULT | Inicialize a Vault using kubectl
  register: task_result
  until: task_result.rc == 0
  retries: 30
  delay: 30
  shell: "if [ ! -s {{ ansible_facts.user_dir }}/.cluster-keys.yaml ]; then kubectl exec -n {{ dojot_namespace }} vault-0 -- vault operator init -key-shares=5 -key-threshold=3 -format=yaml > {{ ansible_facts.user_dir }}/.cluster-keys.yaml; fi"
  ignore_errors: true
  when: ('master_nodes' in group_names)

- name: VAULT | Create secret from file with key shard and root_token
  shell: "cat  {{ ansible_facts.user_dir }}/.cluster-keys.yaml | head -7 | tail -1 | sed 's/- //g' > shard1; \
  cat {{ ansible_facts.user_dir }}/.cluster-keys.yaml | head -8 | tail -1 | sed 's/- //g' > shard2; \
  cat {{ ansible_facts.user_dir }}/.cluster-keys.yaml | head -9 | tail -1 | sed 's/- //g' > shard3; \
  cat {{ ansible_facts.user_dir }}/.cluster-keys.yaml | grep root_token | awk -F: '{print $2}' | sed 's/ //g' > root_token"
  when: ('master_nodes' in group_names)

- name: VAULT | Create secret kubernetes with the key shard
  shell: "kubectl delete secret dojot-key-vault -n {{ dojot_namespace }}; \
  kubectl create secret generic dojot-key-vault -n {{ dojot_namespace }} --from-file=shard1 --from-file=shard2 --from-file=shard3 --from-file=root_token"
  when: ('master_nodes' in group_names)

- name: VAULT | Get key shard 1
  shell: "kubectl get secrets -n {{ dojot_namespace }} dojot-key-vault -o jsonpath='{.data.shard1}' | base64 -d"
  register: shard1

- name: VAULT | Get key shard 2
  shell: "kubectl get secrets -n {{ dojot_namespace }} dojot-key-vault -o jsonpath='{.data.shard2}' | base64 -d"
  register: shard2

- name: VAULT | Get key shard 3
  shell: "kubectl get secrets -n {{ dojot_namespace }} dojot-key-vault -o jsonpath='{.data.shard3}' | base64 -d"
  register: shard3

- name: VAULT | Get root_token
  shell: "kubectl get secrets -n {{ dojot_namespace }} dojot-key-vault -o jsonpath='{.data.root_token}' | base64 -d"
  register: root_token

- name: VAULT | CronJob Unseal
  k8s:
    kubeconfig: "{{ dojot_kubeconfig_file_path | default(omit) }}"
    state: present
    definition: "{{ item }}"
  register: result
  until: result.failed == 0
  retries: 30
  delay: 10
  loop:
  - "{{ lookup('template', 'vault_cron_job.yaml') | from_yaml }}"

- name: VAULT | Vault Login
  register: result
  until: result.failed == 0
  retries: 30
  delay: 40
  ignore_errors: true
  command: "{{ item }}"
  with_items:
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault login {{ root_token.stdout }}"
  when: ('master_nodes' in group_names)

- name: VAULT | Vault Enable KV
  ignore_errors: true
  command: "{{ item }}"
  with_items:
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault secrets enable -version=2 -path=secret/ kv"
  when: ('master_nodes' in group_names)

- name: VAULT | Vault Create Policy
  ignore_errors: true
  register: result
  until: result.failed == 0
  retries: 30
  delay: 20
  command: "{{ item }}"
  with_items:
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault policy write dojot-policy /vault/config-policy/policy.hcl"
  when: ('master_nodes' in group_names)

- name: Copy Kubernetes Config File in Vault
  template:
    src: "kubernetes_config.sh"
    dest: "{{ ansible_facts.user_dir }}"
    mode: 0755

- name: VAULT | Enable Kubernetes auth
  ignore_errors: true
  command: "{{ item }}"
  with_items:
    - "kubectl cp {{ ansible_facts.user_dir }}/kubernetes_config.sh dojot/vault-0:/tmp"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault auth enable kubernetes"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- /tmp/kubernetes_config.sh"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault write auth/kubernetes/role/k8s-role \
    bound_service_account_names=* \
    bound_service_account_namespaces=* \
    policies=dojot-policy \
    ttl=24h"

- name: VAULT | Secret Store
  k8s:
    kubeconfig: "{{ dojot_kubeconfig_file_path | default(omit) }}"
    state: present
    definition: "{{ item }}"
  register: result
  until: result.failed == 0
  retries: 30
  delay: 40
  loop:
  - "{{ lookup('template', 'vault_secret_store.yaml') | from_yaml }}"

- name: VAULT | Limpeza arquivos tempor√°rios
  ignore_errors: true
  command: "{{ item }}"
  with_items:
    - rm -f {{ ansible_facts.user_dir }}/shard1
    - rm -f {{ ansible_facts.user_dir }}/shard2
    - rm -f {{ ansible_facts.user_dir }}/shard3
    - rm -f {{ ansible_facts.user_dir }}/root_token
    - rm -f {{ ansible_facts.user_dir }}/kubernetes_config.sh

- name: VAULT | Insert database secrets
  ignore_errors: true
  command: "{{ item }}"
  with_items:
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/postgres user=postgres password={{ postgres_secret.stdout_lines[0] }} db=postgres"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/mongodb user=mongodb password={{ postgres_secret.stdout_lines[0] }}"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/influxdb admin-token=dojot@token_default admin-password={{ influxdb_secret.stdout_lines[0] }}"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/kong user=kong password={{ kong_secret.stdout_lines[0] }} db=kong"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/devm user=devm password={{ devm_secret.stdout_lines[0] }} crypto_pass=kamehameHA crypto_iv=1234567890123456 crypto_salt=shuriken"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/x509-ejbca user=ejbca password={{ x509_ejbca_secret.stdout_lines[0] }}"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/keycloak user=keycloak password={{ keycloak_secret.stdout_lines[0] }} db=keycloak"

- name: VAULT | Insert secrets
  ignore_errors: true
  command: "{{ item }}"
  with_items:
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/minio-files MINIO_ACCESS_KEY={{ minio_files_access_key.stdout_lines[0] }} MINIO_SECRET_KEY={{ minio_files_secret_key.stdout_lines[0] }}"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/dojot-secrets dojot-basic-auth={{ dojot_secret.stdout_lines[0] }} \
    dojot-cert-support={{ dojot_secret.stdout_lines[0] }} \
    dojot-certificate-acl={{ dojot_secret.stdout_lines[0] }} \
    dojot-cron={{ dojot_secret.stdout_lines[0] }} \
    dojot-device-manager-sidecar={{ dojot_secret.stdout_lines[0] }} \
    dojot-device-manager-batch={{ dojot_secret.stdout_lines[0] }} \
    dojot-file-mgmt={{ dojot_secret.stdout_lines[0] }} \
    dojot-http-agent={{ dojot_secret.stdout_lines[0] }} \
    dojot-influxdb-retriever={{ dojot_secret.stdout_lines[0] }} \
    dojot-iotagent-mqtt-sidecar={{ dojot_secret.stdout_lines[0] }} \
    dojot-x509-identity-mgmt={{ dojot_secret.stdout_lines[0] }} \
    dojot-report-manager={{ dojot_secret.stdout_lines[0] }} \
    dojot-v2k-bridge={{ dojot_secret.stdout_lines[0] }} \
    dojot-device-manager-batch={{ dojot_secret.stdout_lines[0] }} \
    dojot-flowbroker={{ dojot_secret.stdout_lines[0] }} \
    KEYCLOAK_PROXY={{ dojot_secret.stdout_lines[0] }} \
    KEYCLOAK_PROXY_USER={{ dojot_secret.stdout_lines[0] }}"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/backstage BS_SESSION_SECRET={{ backstage_secret.stdout_lines[0] }}"
    - "kubectl exec vault-0 -n {{ dojot_namespace }} -- vault kv put -cas=0 secret/kafka-ws KAFKA_WS_TICKET_SECRET={{ kafka_ws_secret.stdout_lines[0] }}"


- name: VAULT | Changes CronJob Vault Unseal
  register: result
  until: result.failed == 0
  retries: 30
  delay: 30
  ignore_errors: true
  command: "{{ item }}"
  with_items:
    - "kubectl -n {{ dojot_namespace }} patch cronjobs vault-unseal-cronjob -p '{\"spec\":{\"schedule\": \"0/30 * * * *\"}}'"
    - "kubectl -n {{ dojot_namespace }} patch cronjobs vault-unseal-cronjob -p '{\"spec\":{\"jobTemplate\":{\"spec\":{\"parallelism\":1,\"completions\":1}}}}'"
  when: ('master_nodes' in group_names)

