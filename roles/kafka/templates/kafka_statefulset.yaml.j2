apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-server
  namespace: {{ dojot_namespace }}
spec:
  serviceName: kafka-server
  replicas: {{ dojot_kafka_cluster_size }}
  selector:
    matchLabels:
      app: dojot
      name: kafka-server
  template:
    metadata:
      labels:
        app: dojot
        name: kafka-server
    spec:
      terminationGracePeriodSeconds: 300
      containers:
        - name: kafka
          imagePullPolicy: IfNotPresent
          image: confluentinc/cp-kafka:5.5.0
          ports:
            - containerPort: {{ dojot_kafka_port }}
              name: server
            - containerPort: 29092
              name: client
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper-client:{{ dojot_zk_client_port }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://:{{ dojot_kafka_port }}"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              value: "0"
            - name: KAFKA_LOG_RETENTION_MINUTES
              value: "30"
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: "262144000"
            - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
              value: "30000"
{% if dojot_kafka_persistent_volumes %}
          volumeMounts:
            - mountPath: /var/lib/kafka/data
              name: kafka-volume
{% endif %}
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "/usr/bin/kafka-broker-api-versions --bootstrap-server=localhost:{{ dojot_kafka_port }}"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
{% if dojot_enable_node_affinity %}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: dojot.components/group
                operator: In
                values:
                - "{{ dojot_node_label.kafka }}"
{% endif %}
{% if dojot_kafka_persistent_volumes %}
  volumeClaimTemplates:
  - metadata:
      name: kafka-volume
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ dojot_storage_class_name }}
      resources:
        requests:
          storage: {{ dojot_kafka_volume_size }}
      selector:
        matchLabels:
          app: dojot
          name: kafka-server
{% endif %}
