apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    name: kafka-ws
    app: dojot
  name: kafka-ws
  namespace: {{ dojot_namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dojot
      name: kafka-ws
  template:
    metadata:
      labels:
        name: kafka-ws
        app: dojot
    spec:
      restartPolicy: Always
      securityContext:
        fsGroup: 0
      containers:
      - name: kafka-ws
        image: dojot/kafka-ws:{{ dojot_kafka_ws_version }}
        # WARNING: if you are using Mutual TLS, the readiness won't work because it's not supported
        # by Kubernetes
        readinessProbe:
          httpGet:
            path: /ready
            port: 9000
{% if dojot_kafka_ws_enable_tls %}
            scheme: HTTPS
{% endif %}
          initialDelaySeconds: 15
          failureThresold: 1
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /live
            port: 9000
          failureThresold: 3
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 3
        env:
        - name: KAFKA_WS_CONSUMER_METADATA_BROKER_LIST
          value: "kafka-server:{{ dojot_kafka_port }}"
        - name: KAFKA_WS_SERVER_PORT
          value: "{{ dojot_kafka_ws_port }}"
        - name: KAFKA_WS_REDIS_HOST
          value: "kafka-ws-redis"
        - name: KAFKA_WS_REDIS_PORT
          value: "{{ dojot_kafka_ws_redis_port }}"
        - name: KAFKA_WS_SERVER_TLS
          value: "{{ dojot_kafka_ws_enable_tls }}"
          # NOTE: you must create the volume and pass the certificates to it
        - name: KAFKA_WS_SERVER_CA
          value: "/opt/kafka-ws/certs/ca.crt"
        - name: KAFKA_WS_SERVER_KEY
          value: "/opt/kafka-ws/certs/kafka-ws.key"
        - name: KAFKA_WS_SERVER_CERT
          value: "/opt/kafka-ws/certs/kafka-ws.crt"
        - name: KAFKA_WS_SERVER_REQUEST_CERT
          value: "true"
          # NOTE: The KAFKA_WS_TICKET_SECRET should be unique for each environment
        - name: KAFKA_WS_TICKET_SECRET
          value: "{{ dojot_kafka_ws_ticket_secret }}"
        volumeMounts:
        - name: kafka-ws
          mountPath: /opt/kafka-ws/certs
      volumes:
      - name: kafka-ws
        persistentVolumeClaim:
          claimName: kafka-ws
{% if dojot_enable_node_affinity %}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: dojot.components/dojot
                operator: In
                values:
                - "enabled"
{% endif %}
