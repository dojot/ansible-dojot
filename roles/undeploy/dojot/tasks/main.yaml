---
- name: Get the CronJob in the dojot namespace
  k8s_info:
    kind: CronJob
    namespace: "{{ dojot_namespace }}"
  register: cronjob_list

- name: Delete CronJob
  k8s:
    state: absent
    api_version: v1
    kind: CronJob
    namespace: "{{ dojot_namespace }}"
    name: "{{ item }}"
  loop: "{{ cronjob_list | json_query('resources[*].metadata.name') }}"

- name: Delete kafka-server StatefulSet
  k8s:
    api_version: v1
    kind: StatefulSet
    namespace: "dojot"
    name: "kafka-server"
    state: absent

- name: Get the StatefulSet in the dojot namespace
  k8s_info:
    kind: StatefulSet
    namespace: dojot
  register: pod_list

- name: Delete StatefulSet
  k8s:
    state: absent
    api_version: v1
    kind: StatefulSet
    namespace: dojot
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Get the Deployments in the dojot namespace
  k8s_info:
    kind: Deployment
    namespace: dojot
  register: pod_list

- name: Delete Deployments
  k8s:
    state: absent
    api_version: v1
    kind: Deployment
    namespace: dojot
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Get the Jobs in the dojot namespace
  k8s_info:
    kind: Job
    namespace: dojot
  register: pod_list

- name: Delete Jobs
  k8s:
    state: absent
    api_version: v1
    kind: Job
    namespace: dojot
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Get the Services in the dojot namespace
  k8s_info:
    kind: Service
    namespace: dojot
  register: pod_list

- name: Delete Services
  k8s:
    state: absent
    api_version: v1
    kind: Service
    namespace: dojot
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Get the Pods in the dojot namespace
  k8s_info:
    kind: Pod
    namespace: dojot
  register: pod_list

- name: Delete Pods
  k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: dojot
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Get the DaemonSet in the dojot namespace
  k8s_info:
    kind: DaemonSet
    namespace: dojot
  register: daemon_set_list

- name: Delete DaemonSet
  k8s:
    state: absent
    api_version: v1
    kind: DaemonSet
    namespace: dojot
    name: "{{ item }}"
  loop: "{{ daemon_set_list | json_query('resources[*].metadata.name') }}"

- name: Get the PVC's in the dojot namespace
  k8s_info:
    kind: pvc
    namespace: dojot
  register: pod_list

- name: Delete PVC's
  k8s:
    state: absent
    api_version: v1
    kind: pvc
    namespace: dojot
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Delete dojot CRDs
  k8s:
    api_version: v1
    kind: CustomResourceDefinition
    name: vernemqs.vernemq.com
    state: absent

- name: Disassociate dojot old PV's
  ignore_errors: true
  command: "{{ item }}"
  with_items:
    - 'kubectl patch pv pv-certificate-acl -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-influxdb -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-influxdb-chronograf -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-kafka -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-kafka-ws -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-keycloak-init -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-keycloak -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-kong -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-minio-files -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-mongo -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-postgres -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-x509-ejbca -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-x509-identity-mgmt -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-zk-data -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-zk-log -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-consul-server -p ''{"spec":{"claimRef": null}}'''
    - 'kubectl patch pv pv-telemetria-grafana -p ''{"spec":{"claimRef": null}}'''

- name: Uninstall External Secrets helm service
  kubernetes.core.helm:
    release_state: absent
    release_name: "external-secrets"
    release_namespace: "{{ dojot_namespace }}"
  when: optional['vault']

- name: Delete Credencial Vault
  file:
    path: "{{ ansible_facts.user_dir }}/{{item.file}}"
    state: absent
  loop:
    - { file: "shard1" }
    - { file: "shard2" }
    - { file: "shard3" }
  when: optional['vault']

# Telemetria -------------------------------------------------
- name: Uninstall helm services
  kubernetes.core.helm:
    release_state: absent
    release_name: "{{ item }}"
    release_namespace: "{{dojot_namespace}}"
  with_items:
    - "grafana"

- name: Remove Helm repositories
  kubernetes.core.helm_repository:
    repo_state: absent
    repo_name: "{{ item }}"
  with_items:
    - "grafana"

- name: Delete telemetria CRD's (Custom Resource Definition)
  k8s:
    api_version: v1
    kind: CustomResourceDefinition
    name: "{{ item }}"
    state: absent
  with_items:
    - "alertmanagerconfigs.monitoring.coreos.com"
    - "alertmanagers.monitoring.coreos.com"
    - "podmonitors.monitoring.coreos.com"
    - "probes.monitoring.coreos.com"
    - "prometheuses.monitoring.coreos.com"
    - "prometheusrules.monitoring.coreos.com"
    - "servicemonitors.monitoring.coreos.com"
    - "thanosrulers.monitoring.coreos.com"

# Keda -------------------------------------------------------
- name: Keda | Get the Deployments in the keda namespace
  k8s_info:
    kind: Deployment
    namespace: keda
  register: pod_list

- name: Keda | Delete Deployments
  k8s:
    state: absent
    api_version: v1
    kind: Deployment
    namespace: keda
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Keda | Get the Services in the keda namespace
  k8s_info:
    kind: Service
    namespace: keda
  register: pod_list

- name: Keda | Delete Services
  k8s:
    state: absent
    api_version: v1
    kind: Service
    namespace: keda
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Keda | Get the ReplicaSets in the keda namespace
  k8s_info:
    kind: ReplicaSet
    namespace: keda
  register: pod_list

- name: Keda | Delete ReplicaSets
  k8s:
    state: absent
    api_version: v1
    kind: ReplicaSet
    namespace: keda
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Keda | Delete keda CRDs
  k8s:
    api_version: v1
    kind: CustomResourceDefinition
    name: "{{ item }}"
    state: absent
  with_items:
    - "scaledjobs.keda.sh"
    - "clustertriggerauthentications.keda.sh"
    - "scaledobjects.keda.sh"
    - "triggerauthentications.keda.sh"
  when: optional['keda']

- name: Keda | Uninstall Keda helm service
  kubernetes.core.helm:
    release_state: absent
    release_name: "keda"
    release_namespace: keda
  when: optional['keda']

# Metrics Server -----------------------------------------------
- name: Metrics Server | Get the Deployments in the dojot-metrics-server namespace
  k8s_info:
    kind: Deployment
    namespace: dojot-metrics-server
  register: pod_list

- name: Metrics Server | Delete Deployments
  k8s:
    state: absent
    api_version: v1
    kind: Deployment
    namespace: dojot-metrics-server
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Metrics Server | Get the Services in the dojot-metrics-server namespace
  k8s_info:
    kind: Service
    namespace: dojot-metrics-server
  register: pod_list

- name: Metrics Server | Delete Services
  k8s:
    state: absent
    api_version: v1
    kind: Service
    namespace: dojot-metrics-server
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Metrics Server | Get the ReplicaSets in the dojot-metrics-server namespace
  k8s_info:
    kind: ReplicaSet
    namespace: dojot-metrics-server
  register: pod_list

- name: Metrics Server | Delete ReplicaSets
  k8s:
    state: absent
    api_version: v1
    kind: ReplicaSet
    namespace: dojot-metrics-server
    name: "{{ item }}"
  loop: "{{ pod_list | json_query('resources[*].metadata.name') }}"

- name: Metrics Server | Uninstall dojot metrics server helm service
  kubernetes.core.helm:
    release_state: absent
    release_name: "metrics-server"
    release_namespace: dojot-metrics-server
  when: "{{ dojot_metrics_server_enabled }}"
